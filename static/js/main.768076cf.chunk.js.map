{"version":3,"sources":["components/member.js","components/members.js","App.js","registerServiceWorker.js","index.js"],"names":["Member","member","platform","lastPlayed","Moment","unix","lastOnlineStatusChange","fromNow","today","Date","daysSincePlayed","diff","destinyUserInfo","className","memberType","displayName","Members","props","state","BASE_URL","API_KEY","groupId","clanName","members","failedCall","request","get","this","set","end","err","res","setState","results","JSON","parse","text","Response","map","index","currentMember","applicableMembershipTypes","key","toString","length","Component","App","window","location","href","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.768076cf.chunk.js","sourcesContent":["import React from 'react';\nimport Moment from 'moment';\n\nconst Member = ({member, platform}) => {\n\n\tconst platforms = [\"on Unknown\", \"on Xbox\", \"on Ps4\", \"on Steam\", \"on Blizzard\" ,\"on Stadia\"];\n\tconst lastPlayed = Moment.unix(member.lastOnlineStatusChange).fromNow();\n\tconst today = Moment(new Date());\n\tconst daysSincePlayed = Moment.unix(member.lastOnlineStatusChange).diff(today, 'days');\n\n\tif (!member.destinyUserInfo)\t{ \n\t\treturn <div></div>; \n\t} else {\n\t\treturn (\n\t\t\t<div \n\t\t\t\tclassName={`member \n\t\t\t\t\t${(daysSincePlayed - daysSincePlayed * 2) > 89 ? \"boot\" : \"dont-boot\"} \n\t\t\t\t\t${member.memberType >= 3 ? \"admin\" : \"\"}`}>\n\t\t\t\t\t<strong>{member.destinyUserInfo.displayName}</strong> : Played { lastPlayed } {platforms[platform]}\n\t\t\t</div>\n\t\t);\n\t}\n};\n\nexport default Member;\n","import React, { Component } from \"react\";\nimport Member from \"./member\";\nimport request from \"superagent\";\n\nclass Members extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      BASE_URL: props.BASE_URL,\n      API_KEY: props.API_KEY,\n      groupId: props.groupId,\n      clanName: props.clanName,\n      platform: props.platform,\n      members: [],\n      failedCall : false\n    };\n  }\n\n  componentDidMount() {\n    request\n      .get(`${this.state.BASE_URL}/GroupV2/${this.state.groupId}/Members/`)\n      .set(\"X-API-Key\", this.state.API_KEY)\n      .set(\"accept\", \"json\")\n      .end((err, res) => {\n        if (!err) {\n          const results = JSON.parse(res.text);\n          this.setState({\n            members: results.Response.results\n          });\n        } else {\n          this.setState({failedCall : true});\n        }\n      });\n  }\n\n  render() {\n    const members = this.state.members.map((member, index) => {\n      const currentMember = member;\n      return (\n        <Member\n          member={currentMember}\n          platform={currentMember.destinyUserInfo.applicableMembershipTypes[0]}\n          BASE_URL={this.props.BASE_URL}\n          API_KEY={this.props.API_KEY}\n          key={index.toString()}\n        />\n      );\n    });\n\n    if (this.state.members.length === 0) {\n      return (\n        <div className={`clan ${this.state.clanName}-border`}>\n          <header className={this.state.clanName}>\n            <h2>{this.state.clanName}</h2>\n            <div className=\"member-number\">\n              Number of members: <strong> 0 </strong>\n            </div>\n          </header>\n          <section className=\"members\">\n            <div className=\"loading\">\n              { this.state.failedCall ? \"API call failed :(\" : \"Loading...\" }\n            </div>\n          </section>\n        </div>\n      );\n    } else {\n      return (\n        <div className={`clan ${this.state.clanName}-border`}>\n          <header className={this.state.clanName}>\n            <h2>{this.state.clanName}</h2>\n            <div className=\"member-number\">\n              Number of members: <strong> {members.length} </strong>\n            </div>\n          </header>\n          <section className=\"members\">{members}</section>\n        </div>\n      );\n    }\n  }\n}\n\nexport default Members;\n","import React, {\n  Component\n} from 'react';\nimport './App.css';\n\nimport Members from './components/members';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      BASE_URL: `https://www.bungie.net/Platform`,\n      API_KEY: window.location.href === \"http://localhost:3000/\" ? `9c2fa45363f943bca1ab8b94c6d3fa59` : `5bae9685d44d40879a0a24da5e948e90`,  \n    };\n  }\n\n  render() {\n    return ( \n      <div className=\"container\">\n        <Members \n          clanName=\"Knights\"\n          groupId=\"1770080\"\n          BASE_URL={this.state.BASE_URL}\n          API_KEY={this.state.API_KEY} />\n\n        <Members \n          clanName=\"Fatebringers\"\n          groupId=\"2185897\"\n          BASE_URL={this.state.BASE_URL}\n          API_KEY={this.state.API_KEY} />\n          \n          \n        <Members \n          clanName=\"Storm\"\n          groupId=\"2057456\"\n          BASE_URL={this.state.BASE_URL}\n          API_KEY={this.state.API_KEY} />\n          \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}